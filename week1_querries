Question 1: Knowing docker tags
    Run the command to get information on Docker
    docker --help
    Now run the command to get help on the "docker build" command:
    docker build --help
    Do the same for "docker run". I.e 
    docker run â€“help
Which tag has the following text? - Automatically remove the container when it exits

    --delete
    --rc
    --rmc
    --rm = Answer

Question 2. Understanding docker first run
    Run docker with the python:3.9 image in an interactive mode and the entrypoint of bash. Now check the python modules that are installed ( use pip list ).
What is the version of the package wheel ?
    0.42.0 = Answer
    1.0.0
    23.0.1
    58.1.0

Question 3. Count records
How many taxi trips were totally made on September 18th 2019?
Tip: started and finished on 2019-09-18.

Remember that lpep_pickup_datetime and lpep_dropoff_datetime columns are in the format timestamp (date and hour+min+sec) and not in date.

    15767
    15612 = Answer
    15859
    89009
Solution:
SELECT count(*) FROM green_taxi_data 
WHERE 
    DATE(lpep_pickup_datetime) = '2019-09-18' AND DATE(lpep_dropoff_datetime) = '2019-09-18'

Question 4. Largest trip for each day
Which was the pick up day with the largest trip distance Use the pick up time for your calculations.
2019-09-18
2019-09-16
2019-09-26 - Answer
2019-09-21

Solution:

SELECT 
    trip_distance,
	DATE(lpep_pickup_datetime)
FROM 
    green_taxi_data 
WHERE 
    DATE(lpep_pickup_datetime) = '2019-09-18' OR
	DATE(lpep_pickup_datetime) = '2019-09-16' OR
	DATE(lpep_pickup_datetime) = '2019-09-26' OR
	DATE(lpep_pickup_datetime) = '2019-09-21'
ORDER BY 
    trip_distance DESC
LIMIT 10;

#Question 5. Three biggest pick up Boroughs
    Consider lpep_pickup_datetime in '2019-09-18' and ignoring Borough has Unknown
Which were the 3 pick up Boroughs that had a sum of total_amount superior to 50000?
    "Brooklyn" "Manhattan" "Queens" = Answer
    "Bronx" "Brooklyn" "Manhattan"
    "Bronx" "Manhattan" "Queens"
    "Brooklyn" "Queens" "Queens"
Solution:
SELECT 
    DATE(a."lpep_pickup_datetime") AS pickup_date,
    SUM(a."total_amount") AS total_amount,
    CASE
        WHEN b."Borough" IN ('Brooklyn', 'Manhattan', 'Queens') THEN 'Group 1'
        WHEN b."Borough" IN ('Bronx', 'Brooklyn', 'Manhattan') THEN 'Group 2'
        WHEN b."Borough" IN ('Bronx', 'Manhattan', 'Queens') THEN 'Group 3'
        WHEN b."Borough" IN ('Brooklyn', 'Queens', 'Queens') THEN 'Group 4'
        ELSE 'Other'
    END AS borough_group
FROM 
    green_taxi_data AS a
JOIN 
    zones AS b ON a."PULocationID" = b."LocationID"
WHERE 
    DATE(a."lpep_pickup_datetime") = '2019-09-18' 
    AND (b."Borough" IN ('Brooklyn', 'Manhattan', 'Queens') OR 
         b."Borough" IN ('Bronx', 'Brooklyn', 'Manhattan') OR 
         b."Borough" IN ('Bronx', 'Manhattan', 'Queens') OR
         b."Borough" IN ('Brooklyn', 'Queens', 'Queens'))
GROUP BY 
    pickup_date, borough_group
HAVING 
    SUM(a."total_amount") > 50000;

#Question 6. Largest tip
For the passengers picked up in September 2019 in the zone name Astoria which was the drop off zone that had the largest tip? We want the name of the zone, not the id.
Note: it's not a typo, it's tip , not trip
    Central Park
    Jamaica
    JFK Airport = Answer
    Long Island City/Queens Plaza
Solution:
SELECT
	Lpep_pickup_datetime,
	tip_amount,
	b."Zone" AS pickup_loc,
	c."Zone" AS dropoff_loc
FROM 
	green_taxi_data a
JOIN 
	zones b ON a."PULocationID" = b."LocationID"
JOIN 
	zones c ON a."DOLocationID" = c."LocationID"
WHERE 
	b."Zone" = 'Astoria'
ORDER BY 
	tip_amount DESC, dropoff_loc DESC;


#Question 7. Creating Resources

After updating the main.tf and variable.tf files run:
terraform apply
Paste the output of this command into the homework submission form.

Answer:
(base) tapji@de-zoomcamp:~/data-engineering-zoomcamp/01-docker-terraform/1_terraform_gcp/terraform/terraform_with_variables$ terraform apply

Terraform used the selected providers to generate the following execution plan.
Resource actions are indicated with the following symbols:
  + create

Terraform will perform the following actions:

  # google_bigquery_dataset.demo_dataset will be created
  + resource "google_bigquery_dataset" "demo_dataset" {
      + creation_time              = (known after apply)
      + dataset_id                 = "tapji_dataset"
      + default_collation          = (known after apply)
      + delete_contents_on_destroy = false
      + effective_labels           = (known after apply)
      + etag                       = (known after apply)
      + id                         = (known after apply)
      + is_case_insensitive        = (known after apply)
      + last_modified_time         = (known after apply)
      + location                   = "europe-west1"
      + max_time_travel_hours      = (known after apply)
      + project                    = "data-engineering-405316"
      + self_link                  = (known after apply)
      + storage_billing_model      = (known after apply)
      + terraform_labels           = (known after apply)
    }

  # google_storage_bucket.demo-bucket will be created
  + resource "google_storage_bucket" "demo-bucket" {
      + effective_labels            = (known after apply)
      + force_destroy               = true
      + id                          = (known after apply)
      + location                    = "EUROPE-WEST1"
      + name                        = "tapji-terraform-bucket"
      + project                     = (known after apply)
      + public_access_prevention    = (known after apply)
      + self_link                   = (known after apply)
      + storage_class               = "STANDARD"
      + terraform_labels            = (known after apply)
      + uniform_bucket_level_access = (known after apply)
      + url                         = (known after apply)

      + lifecycle_rule {
          + action {
              + type = "AbortIncompleteMultipartUpload"
            }
          + condition {
              + age                   = 1
              + matches_prefix        = []
              + matches_storage_class = []
              + matches_suffix        = []
              + with_state            = (known after apply)
            }
        }
    }

Plan: 2 to add, 0 to change, 0 to destroy.

Do you want to perform these actions?
  Terraform will perform the actions described above.
  Only 'yes' will be accepted to approve.

  Enter a value: yes

google_bigquery_dataset.demo_dataset: Creating...
google_storage_bucket.demo-bucket: Creating...
google_bigquery_dataset.demo_dataset: Creation complete after 1s [id=projects/data-engineering-405316/datasets/tapji_dataset]
google_storage_bucket.demo-bucket: Creation complete after 1s [id=tapji-terraform-bucket]
